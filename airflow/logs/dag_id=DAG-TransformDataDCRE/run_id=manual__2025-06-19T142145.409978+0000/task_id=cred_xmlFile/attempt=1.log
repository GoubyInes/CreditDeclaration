{"timestamp":"2025-06-19T14:21:46.274959","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-19T14:21:46.275459","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/transformDataDCRE.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-19T14:21:46.607023","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-19T14:21:46.614353","level":"info","event":"Connection Retrieved 'sqlserver'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-19T14:21:46.639056","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py:462: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-06-19T14:21:46.647492","level":"warning","event":"/opt/airflow/dags/transformDataDCRE.py:38: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  physic_person_list = physic_person_list.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n","logger":"py.warnings"}
{"timestamp":"2025-06-19T14:21:46.691116","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
