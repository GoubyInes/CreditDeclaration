{"timestamp":"2025-08-07T13:36:10.579820","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-07T13:36:10.580528","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/transformData.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-07T13:36:10.959852","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-08-07T13:36:10.968788","level":"info","event":"Connection Retrieved 'sqlserver'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-07T13:36:11.009169","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py:462: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-08-07T13:36:11.071445","level":"info","event":"Done. Returned value was:     id code_agence  ...           cle_intermediaire       cle_onomastique\n0  252         161  ...  012002204638616             11160010071922051988\n1  253         161  ...  01200223554135              12350011098013031993\n2  254         161  ...  0120021655131               11300041098016081979\n3  255         161  ...  0120021                     12120041098026031996\n4  256         161  ...  0120026133431               11310161098006121970\n5  257         161  ...  012002111111                12160010071922051988\n\n[6 rows x 32 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-07T13:36:11.071740","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('019884bf-09e4-703e-a762-0641f5bdb7b0'), task_id='get_personne_physique', dag_id='DAG-TransformData', run_id='manual__2025-08-07T13:36:09.126088+00:00', try_number=1, map_index=-1, hostname='0025c1eca7cc', context_carrier={}, task=<Task(PythonOperator): get_personne_physique>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 8, 7, 13, 36, 10, 283988, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
