{"timestamp":"2025-06-18T14:30:36.936965","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-18T14:30:36.937548","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/transformData.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-18T14:30:37.315205","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-18T14:30:37.324764","level":"info","event":"Connection Retrieved 'sqlserver'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-18T14:30:37.350652","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py:462: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-06-18T14:30:37.381049","level":"info","event":"Done. Returned value was:   code_agence  client_radical  ...           cle_intermediaire       cle_onomastique\n0         161               1  ...  012002204638616             11160010071922051988\n1         161               3  ...  01200223554135              12350011098013031993\n2         161               4  ...  0120021655131               11300041098016081979\n3         161               5  ...  0120021                     12120041098026031996\n4         161               6  ...  0120026133431               11310161098006121970\n5         161              10  ...  012002111111                12160010071922051988\n6         161              30  ...  012002101513800             11250011286409091991\n\n[7 rows x 31 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-18T14:30:37.381334","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01978372-e728-7488-a1d9-a909861774db'), task_id='get_personne_physique', dag_id='DAG-TransformData', run_id='manual__2025-06-18T14:30:35.038778+00:00', try_number=1, map_index=-1, hostname='0025c1eca7cc', context_carrier={}, task=<Task(PythonOperator): get_personne_physique>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 6, 18, 14, 30, 36, 668959, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
